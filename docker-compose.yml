version: '3'
services:  
  # Api1
  api1:
    image: communicationapi1
    build: 
      # Pasta onde vai ocorrer o build
      context: ./
      # Nome do arquivo que vai gerar a imagem
      dockerfile: Dockerfile-api1 
      args:
        - sonarLogin=$sonarLogin    
    environment:
        - ASPNETCORE_ENVIRONMENT=Docker     
        - rabbit.host=rabbit     
        - rabbit.port=5672       
        - rabbit.user=adm_user     
        - rabbit.password=mudar12345
        - rabbit.read=micro1
        - rabbit.publish=micro2   
    # Porta do host onde a aaplicação pode ser acessada 
    ports:
      - 3001:80
    # Rede que o container vai estar conectado  
    networks: 
      - services
    # Serviços do qual a aplicação depende  
    depends_on:
      - rabbit     
  # Api2
  api2:
    image: communicationapi2
    build: 
      context: ./
      dockerfile: Dockerfile-api2       
      args:
        - sonarLogin=$sonarLogin 
    environment:
        - ASPNETCORE_ENVIRONMENT=Docker     
        - rabbit.host=rabbit     
        - rabbit.port=5672       
        - rabbit.user=adm_user     
        - rabbit.password=mudar12345
        - rabbit.read=micro2
        - rabbit.publish=micro1    
        - rabbit.virtualhost=mainHost    
    ports:
      - 3002:80 
    networks: 
      - services
    depends_on:
      - rabbit
  # Imagem Oficial do rabbit
  rabbit:
    # imagem do rabbit que será utilizada
    image: rabbitmq:3.8-management
    # parametros da imagem
    environment: 
      RABBITMQ_DEFAULT_USER: adm_user
      RABBITMQ_DEFAULT_PASS: mudar12345
      RABBITMQ_DEFAULT_VHOST: mainHost
    # portas do host onde por onde podemos acessar o conatainer  
    ports:
       - 5672:5672
       - 15672:15672
    networks: 
      - services
# redes que serão criadas      
networks:
  services:
